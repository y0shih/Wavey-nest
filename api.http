# API Testing with JWT Authentication

# Note: After login/register, copy the access_token from the response 
# and replace YOUR_JWT_TOKEN_HERE with the actual token

### Authentication Endpoints ###

### 1. Register New User
POST http://localhost:3000/auth/register HTTP/1.1
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "password123",
  "name": "Test User"
}

### 2. Login User
POST http://localhost:3000/auth/login HTTP/1.1
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "password123"
}

### 3. Get User Profile (Protected)
GET http://localhost:3000/auth/profile HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Songs Endpoints (All Protected) ###

### 4. Create Song - Valid Request
POST http://localhost:3000/songs HTTP/1.1
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "title": "Bohemian Rhapsody",
  "artist": ["Queen", "Freddie Mercury"],
  "album": "A Night at the Opera",
  "genre": "Rock",
  "releaseDate": "1975-10-31",
  "duration": "05:55"
}

### 5. Create Song - Another Valid Song
POST http://localhost:3000/songs HTTP/1.1
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "title": "Imagine",
  "artist": ["John Lennon"],
  "album": "Imagine",
  "genre": "Pop",
  "releaseDate": "1971-09-09",
  "duration": "03:07"
}

### 6. Create Song - Validation Error (Missing Required Fields)
POST http://localhost:3000/songs HTTP/1.1
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "title": "",
  "artist": [],
  "album": "Test Album"
}

### 7. Create Song - Invalid Duration Format
POST http://localhost:3000/songs HTTP/1.1
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "title": "Test Song",
  "artist": ["Test Artist"],
  "album": "Test Album",
  "releaseDate": "2023-01-01",
  "duration": "invalid"
}

### 8. Create Song - Without Authorization (Should Fail)
POST http://localhost:3000/songs HTTP/1.1
Content-Type: application/json

{
  "title": "Unauthorized Song",
  "artist": ["Test Artist"],
  "album": "Test Album",
  "releaseDate": "2023-01-01",
  "duration": "03:00"
}

### 9. Get All Songs
GET http://localhost:3000/songs HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 10. Get Song by ID - Valid
GET http://localhost:3000/songs/2 HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 11. Get Song by ID - Not Found
GET http://localhost:3000/songs/999 HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 12. Update Song - Full Update (PUT)
PUT http://localhost:3000/songs/1 HTTP/1.1
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "title": "Bohemian Rhapsody (Remastered)",
  "artist": ["Queen"],
  "album": "A Night at the Opera (Remastered)",
  "genre": "Progressive Rock",
  "releaseDate": "1975-10-31",
  "duration": "05:55"
}

### 13. Update Song - Partial Update (PATCH)
PATCH http://localhost:3000/songs/1 HTTP/1.1
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "genre": "Classic Rock"
}

### 14. Search Songs
GET http://localhost:3000/songs/search?q=Bohemian HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 15. Search Songs - Missing Query Parameter
GET http://localhost:3000/songs/search HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 16. Get Songs by Genre
GET http://localhost:3000/songs/genre/Rock HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 17. Get Songs by Artist
GET http://localhost:3000/songs/artist/Queen HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 18. Get Songs by Album
GET http://localhost:3000/songs/album/Imagine HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 19. Special Endpoints - Popular Songs
GET http://localhost:3000/songs/popular HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 20. Special Endpoints - Recent Songs
GET http://localhost:3000/songs/recent HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 21. Special Endpoints - Top Songs
GET http://localhost:3000/songs/top HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 22. Delete Song
DELETE http://localhost:3000/songs/1 HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 23. Try to Get Deleted Song (Should Return 404)
GET http://localhost:3000/songs/1 HTTP/1.1
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### 24. Create Song Without Optional Genre
POST http://localhost:3000/songs HTTP/1.1
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "title": "Yesterday",
  "artist": ["The Beatles", "Paul McCartney"],
  "album": "Help!",
  "releaseDate": "1965-08-06",
  "duration": "02:05"
}

### Testing Authentication Errors ###

### 25. Login with Wrong Password
POST http://localhost:3000/auth/login HTTP/1.1
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "wrongpassword"
}

### 26. Register with Existing Email
POST http://localhost:3000/auth/register HTTP/1.1
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "password123",
  "name": "Another User"
}

### 27. Access Protected Route with Invalid Token
GET http://localhost:3000/songs HTTP/1.1
Authorization: Bearer invalid_token_here